#! /usr/bin/env python

# Reference: https://libvirt.org/html/libvirt-libvirt-domain.html
#
# Author: Md Safiyat Reza <md.reza@snapdeal.com>, Ajay Kumar Mahto <ajay.mahto@snapdeal.com>

import libvirt
import os
import json
import sys
import time
import glob
from xml.etree import ElementTree as etree
from keystoneclient.auth.identity.v3 import Password
from keystoneclient import session
from keystoneclient import client as kclient
from keystoneclient.v3 import client as k3client
from novaclient.v2 import client as nclient
from cinderclient.v1 import client as cclient
from subprocess import Popen, PIPE

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

domainstate = {}
domainstate['0'] = 'NOSTATE'
domainstate['1'] = 'RUNNING'
domainstate['2'] = 'BLOCKED'
domainstate['3'] = 'PAUSED'
domainstate['4'] = 'SHUTDOWN'
domainstate['5'] = 'SHUTOFF'
domainstate['6'] = 'CRASHED'
domainstate['7'] = 'PMSUSPENDED'
domainstate['8'] = 'LAST'
domainstate['NOSTATE'] = {}
domainstate['RUNNING'] = {}
domainstate['BLOCKED'] = {}
domainstate['PAUSED'] = {}
domainstate['SHUTDOWN'] = {}
domainstate['SHUTOFF'] = {}
domainstate['CRASHED'] = {}
domainstate['PMSUSPENDED'] = {}
domainstate['LAST'] = {}
domainstate['NOSTATE']['0'] = 'UNKNOWN'
domainstate['NOSTATE']['1'] = 'LAST'
domainstate['RUNNING']['0'] = 'UNKNOWN'
domainstate['RUNNING']['1'] = 'BOOTED'
domainstate['RUNNING']['2'] = 'MIGRATED'
domainstate['RUNNING']['3'] = 'RESTORED'
domainstate['RUNNING']['4'] = 'FROM_SNAPSHOT'
domainstate['RUNNING']['5'] = 'UNPAUSED'
domainstate['RUNNING']['6'] = 'MIGRATION_CANCELLED'
domainstate['RUNNING']['7'] = 'SAVE_CANCELLED'
domainstate['RUNNING']['8'] = 'WAKEUP'
domainstate['RUNNING']['9'] = 'CRASHED'
domainstate['RUNNING']['10'] = 'LAST'
domainstate['BLOCKED']['0'] = 'UNKNOWN'
domainstate['BLOCKED']['1'] = 'LAST'
domainstate['PAUSED']['0'] = 'UNKNOWN'
domainstate['PAUSED']['1'] = 'USER'
domainstate['PAUSED']['2'] = 'MIGRATION'
domainstate['PAUSED']['3'] = 'SAVE'
domainstate['PAUSED']['4'] = 'DUMP'
domainstate['PAUSED']['5'] = 'IOERROR'
domainstate['PAUSED']['6'] = 'WATCHDOG'
domainstate['PAUSED']['7'] = 'FROM_SNAPSHOT'
domainstate['PAUSED']['8'] = 'SHUTTING_DOWN'
domainstate['PAUSED']['9'] = 'SNAPSHOT'
domainstate['PAUSED']['10'] = 'CRASHED'
domainstate['PAUSED']['11'] = 'STARTING_UP'
domainstate['PAUSED']['12'] = 'LAST'
domainstate['SHUTDOWN']['0'] = 'UNKNOWN'
domainstate['SHUTDOWN']['1'] = 'USER'
domainstate['SHUTDOWN']['2'] = 'LAST'
domainstate['SHUTOFF']['0'] = 'UNKNOWN'
domainstate['SHUTOFF']['1'] = 'SHUTDOWN'
domainstate['SHUTOFF']['2'] = 'DESTROYED'
domainstate['SHUTOFF']['3'] = 'CRASHED'
domainstate['SHUTOFF']['4'] = 'MIGRATED'
domainstate['SHUTOFF']['5'] = 'SAVED'
domainstate['SHUTOFF']['6'] = 'FAILED'
domainstate['SHUTOFF']['7'] = 'FROM_SNAPSHOT'
domainstate['SHUTOFF']['8'] = 'LAST'
domainstate['CRASHED']['0'] = 'UNKNOWN'
domainstate['CRASHED']['1'] = 'PANICKED'
domainstate['CRASHED']['2'] = 'LAST'
domainstate['PMSUSPENDED']['0'] = 'UNKNOWN'
domainstate['PMSUSPENDED']['1'] = 'LAST'

def get_session():
  #Get authentication
  auth = Password(auth_url="http://{{ CONTROLLER_NAME }}:5000/v3", \
                  password="{{ ADMIN_PASS }}".replace("$$", "$"), \
                  username="{{ ADMIN_USER }}", \
                  user_domain_id="default", \
                  project_name="admin", \
                  project_domain_id="default")

  #Get session
  sess = session.Session(auth=auth)
  return sess
  
def get_vol_type_from_controller(vol_id):
  #Get session and cinder client
  sess = get_session()
  cc = cclient.Client(session=sess)

  #Get vol_type from controller and write to file
  fp = open('/tmp/volume_type_file', 'a')
  try:
    vol_type = cc.volumes.get(vol_id).volume_type
  except:
    vol_type = "<unabletogetvolumetype>"
  volume_type = "%s:%s\n" % (vol_id, vol_type)
  fp.write(volume_type)
  fp.close()
  return vol_type

def get_vol_type(vol_id):
  #Check from file
  found_vol_id = False
  try:
    found_vol_id = vol_id in open('/tmp/volume_type_file').read()
  except Exception as e:
    fp = open('/tmp/volume_type_file', 'w')
    fp.close()
  if found_vol_id:
    vol_type = [line for line in open('/tmp/volume_type_file').readlines() if vol_id in line][0].strip("\n").split(":")[1]
    return vol_type
  #Try to get ip from controller
  return get_vol_type_from_controller(vol_id)

def get_ip_from_controller(uuid):
  #Get session and nova client
  sess = get_session()
  nc = nclient.Client(session=sess)

  #Get ip from controller and write to file
  fp = open('/tmp/instance_ip_file', 'a')
  try:
    ip = nc.servers.get(uuid).addresses[nc.servers.get(uuid).addresses.keys()[0]][0]['addr']
  except:
    ip = "<unabletogetip>"
  instance_ip = "%s:%s\n" % (uuid, ip)
  fp.write(instance_ip)
  fp.close()
  return ip

def get_ip(uuid):
  #Check from file
  found_uuid = False
  try:
    found_uuid = uuid in open('/tmp/instance_ip_file').read()
  except Exception as e:
    fp = open('/tmp/instance_ip_file', 'w')
    fp.close()
  if found_uuid:
    ip = [line for line in open('/tmp/instance_ip_file').readlines() if uuid in line][0].strip("\n").split(":")[1]
    return ip
  #Try to get ip from controller
  return get_ip_from_controller(uuid)

def read_cpu_time(instance_uuid):
    fp = open('/tmp/%s-cpu' % instance_uuid, 'r')
    t, cpuTime = fp.read().split()
    t = float(t)
    cpuTime = float(cpuTime)
    fp.close()
    return t, cpuTime

def write_cpu_time(instance_uuid, cpu_time, t):
    fp = open('/tmp/%s-cpu' % instance_uuid, 'w')
    fp.write('%s %s' % (t, cpu_time))
    fp.close()

def calc_cpu_perc(instance_uuid, cpu_time, t):
    curT = t
    curCpuTime = cpu_time
    if not os.path.isfile('/tmp/%s-cpu' % instance_uuid):
        write_cpu_time(instance_uuid, curCpuTime, curT)
        return 0.0
    prevT, prevCpuTime = read_cpu_time(instance_uuid)
    write_cpu_time(instance_uuid, curCpuTime, curT)
    return (curCpuTime - prevCpuTime) / ((curT - prevT) * 10000000)

def read_block_stats(instance_uuid, disk):
    fp = open('/tmp/%s-block-%s' % (instance_uuid, disk), 'r')
    t, readB, readR, writeB, writeR = fp.read().split()
    t = float(t)
    readB = int(readB)
    readR = int(readR)
    writeB = int(writeB)
    writeR = int(writeR)
    fp.close()
    return t, readB, readR, writeB, writeR

def write_block_stats(instance_uuid, disk, t, stats):
    fp = open('/tmp/%s-block-%s' % (instance_uuid, disk), 'w')
    fp.write('%s %s %s %s %s' % (t, stats[1], stats[0], stats[3], stats[2]))
    fp.close()

def calc_block_stats(instance_uuid, disk, vol_id, total_iops_sec, total_bytes_sec, t, stats):
    vol_type = get_vol_type(vol_id)
    vol_type = vol_type.replace('-', '_')
    if not os.path.isfile('/tmp/%s-block-%s' % (instance_uuid, disk)):
        write_block_stats(instance_uuid, disk, t, stats)
        return 0.0
    prevT, prevReadB, prevReadR, prevWriteB, prevWriteR = read_block_stats(
        instance_uuid, disk)
    write_block_stats(instance_uuid, disk, t, stats)
    diff = [cur - prev for cur, prev in zip([t, stats[1], stats[0], stats[3],
                                             stats[2]], [prevT, prevReadB,
                                                         prevReadR, prevWriteB,
                                                         prevWriteR])]
    change = {}
    change['time'] = diff[0]
    change['read_bytes'] = diff[1]
    change['read_ops'] = diff[2]
    change['write_bytes'] = diff[3]
    change['write_ops'] = diff[4]
    change['vol_type'] = vol_type
    change['total_iops_sec'] = total_iops_sec
    change['total_bytes_sec'] = total_bytes_sec
    return change

def get_highest_unit(bps):
  bps = float(bps)
  kbps = bps / (10**3)
  Mbps = bps / (10**6)
  Gbps = bps / (10**9)
  if int(Gbps) > 0:
     return "%.2f Gbps" % Gbps
  elif int(Mbps) > 0:
     return "%.2f Mbps" % Mbps
  elif int(kbps) > 0:
     return "%.2f kbps" % kbps
  else:
     return "%.2f bps" % bps

def read_interface_stats(instance_uuid, interface):
    fp = open('/tmp/%s-interface-%s' % (instance_uuid, interface), 'r')
    t, rx_bytes, rx_packets, rx_errs, rx_drop, tx_bytes, tx_packets, tx_errs, tx_drop = fp.read().split()
    t = float(t)
    rx_bytes = int(rx_bytes)
    rx_packets = int(rx_packets)
    rx_errs = int(rx_errs)
    rx_drop = int(rx_drop)
    tx_bytes = int(tx_bytes)
    tx_packets = int(tx_packets)
    tx_errs = int(tx_errs)
    tx_drop = int(tx_drop)
    fp.close()
    return t, rx_bytes, rx_packets, rx_errs, rx_drop, tx_bytes, tx_packets, tx_errs, tx_drop

def write_interface_stats(instance_uuid, interface, t, stats):
    fp = open('/tmp/%s-interface-%s' % (instance_uuid, interface), 'w')
    fp.write('%s %s %s %s %s %s %s %s %s' % (t, stats[0], stats[1], stats[2],
                                          stats[3], stats[4], stats[5],
                                          stats[6], stats[7]))
    fp.close()

def calc_interface_stats(instance_uuid, interface, t, stats, ob_throttle):
    if not os.path.isfile('/tmp/%s-interface-%s' % (instance_uuid, interface)):
        write_interface_stats(instance_uuid, interface, t, stats)
        return 0.0
    prevT, prevRx_bytes, prevRx_packets, prevRx_errs, prevRx_drop, prevTx_bytes, prevTx_packets, prevTx_errs, prevTx_drop = read_interface_stats(instance_uuid, interface)
    write_interface_stats(instance_uuid, interface, t, stats)
    diff = [cur - prev for cur, prev in zip([t, stats[0], stats[1], stats[2],
                                             stats[3], stats[4], stats[5],
                                             stats[6], stats[7]],
                                            [prevT, prevRx_bytes,
                                             prevRx_packets, prevRx_errs,
                                             prevRx_drop, prevTx_bytes,
                                             prevTx_packets, prevTx_errs,
                                             prevTx_drop])]
    change = {}
    change['time'] = diff[0]
    change['rx_bytes'] = diff[1]
    change['rx_packets'] = diff[2]
    change['rx_errs'] = diff[3]
    change['rx_drop'] = diff[4]
    change['tx_bytes'] = diff[5]
    change['tx_packets'] = diff[6]
    change['tx_errs'] = diff[7]
    change['tx_drop'] = diff[8]
    change['ob_throttle'] = ob_throttle
    return change

def get_cpu_time(virsh_id):
    glob_name = "/sys/fs/cgroup/cpuacct/machine/*%s*/cpuacct.usage" % virsh_id
    file_name = glob.glob(glob_name)
    try:
      f = open(file_name[0])
      cpu_time = int(f.read())
      f.close()
    except IOError as e:
      cpu_time = 0
      print e
    return cpu_time

def get_vm_name(virsh_name):
    try:
      cmd = "sudo cat /etc/libvirt/qemu/*%s*.xml | grep '<nova:name>' | awk -F'>' '{print $2}' | awk -F'<' '{print $1}'" % virsh_name
      p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
      output, error = p.communicate()
      if output:
        return output.strip()
      else:
        return "<notabletogetname>"
    except IOError as e:
        return "<notabletogetname>"


def main():
    conn = libvirt.openReadOnly('qemu:///system')
    namespaces = {'nova':'http://openstack.org/xmlns/libvirt/nova/1.0'}

    stats_all = {}

    for instance in conn.listAllDomains():
        inst = {}
        xml_data = etree.fromstring(instance.XMLDesc())
        uuid = xml_data.find('uuid').text

        inst['uuid'] = uuid
        inst['virsh_name'] = xml_data.find('name',
                             namespaces=namespaces).text

#        inst['name'] = xml_data.find('metadata/nova:instance/nova:name',
#                             namespaces=namespaces).text
        inst['name'] = get_vm_name(inst['virsh_name'])
        inst['flavor'] = xml_data.find('metadata/nova:instance/nova:flavor',
                               namespaces=namespaces).attrib['name']
        inst['memory'] = xml_data.find('metadata/nova:instance/nova:flavor/nova:memory',
                               namespaces=namespaces).text
        inst['disk'] = xml_data.find('metadata/nova:instance/nova:flavor/nova:disk',
                             namespaces=namespaces).text
        inst['swap'] = xml_data.find('metadata/nova:instance/nova:flavor/nova:swap',
                             namespaces=namespaces).text
        inst['ephemeral'] = xml_data.find(
            'metadata/nova:instance/nova:flavor/nova:ephemeral',
            namespaces=namespaces).text
        inst['vcpus'] = xml_data.find('metadata/nova:instance/nova:flavor/nova:vcpus',
                              namespaces=namespaces).text
        inst['owner'] = xml_data.find('metadata/nova:instance/nova:owner/nova:user',
                              namespaces=namespaces).text
        inst['project'] = xml_data.find('metadata/nova:instance/nova:owner/nova:project',
                                namespaces=namespaces).text
        inst['ip'] = get_ip(inst['uuid']).replace('.', '_')

        state, reason = instance.state()
        inst['state'] = state
        inst['reason'] = reason
        if state != 1:
            stats_all[uuid] = inst
            continue

#        cpu_perc = calc_cpu_perc(uuid, instance.getCPUStats(1)[0]['cpu_time'],
#                                 time.time()) / int(inst['vcpus'])
        cpu_perc = calc_cpu_perc(uuid, get_cpu_time(inst['virsh_name']),
                                 time.time()) / int(inst['vcpus'])

        inst['cpu_stats'] = cpu_perc

        inst_mem = instance.memoryStats()
        stats = {}
        if 'available' in inst_mem:
            stats['total'] = int(inst_mem['available'])
            stats['free'] = int(inst_mem['unused'])
        else:
            stats['total'] = -1
            stats['free'] = -1
        stats['used'] = stats['total'] - stats['free']
        stats['percentage'] = stats['used'] * 100.0 / stats['total']
        inst['memory_stats'] = stats

        stats = {}
        for disk in xml_data.findall('devices/disk', namespaces=namespaces):
            device = disk.find('target').attrib['dev']
            
            # Gathering volume_id
            try:
             source = [volume for volume in disk.find('source').__dict__['attrib'].values() if 'volume' in volume][0]
             device_id = source.split('volume-')[1].strip('-').replace('--', '-')
            except:
             device_id = 'none'
            
            # Gathering disk throttle values (total_iops_sec).
            try:
              total_iops_sec = disk.find('iotune').find('total_iops_sec').text
            except:
              total_iops_sec = 0
            
            # Gathering disk throttle values (total_bytes_sec).
            try:
              total_bytes_sec = disk.find('iotune').find('total_bytes_sec').text
            except:
              total_bytes_sec = 0
         
            stats[device] = calc_block_stats(uuid, device, device_id, total_iops_sec, total_bytes_sec, time.time(),
                                     instance.blockStats(device))
        inst['disk_stats'] = stats

        stats = {}
        for interface in xml_data.findall('devices/interface', namespaces=namespaces):
            device = interface.find('target').attrib['dev']
            try:
              ob_avg = interface.find('bandwidth').find('outbound').attrib['average']
            except:
              ob_avg=0
            ob_throttle = int(ob_avg) / 130000
            stats[device] = calc_interface_stats(instance.UUIDString(), device, time.time(),
                                         instance.interfaceStats(device), ob_throttle)
        inst['interface_stats'] = stats

        stats_all[uuid] = inst


    instance_count = len(stats_all)
    instance_running_count = 0
    firstLine = 'Number of Instances: %d' % instance_count
    output = ''
    graphite = ''
    graphite += 'num_instances=%s;;;; ' % instance_count
    for uuid, instance in stats_all.items():
        output += '\n%s (%s, %s, %s, %s)\n' % (instance['uuid'], instance['name'], instance['ip'].replace('_', '.'),
                                         instance['owner'], instance['project'])
        output += '\tState: %s    Reason: %s\n' % (domainstate[str(instance['state'])],
                                                  domainstate[domainstate[str(instance['state'])]][str(instance['reason'])])
        if instance['state'] != 1:
            continue
        instance_running_count += 1
        project_name = instance['project']
        if "." in instance['project']:
           project_name = instance['project'].replace(".", "_")

        # Format CPU stats
        output += '\tCPU: %.2f %%    VCPUs: %s\n' % (instance['cpu_stats'], instance['vcpus'])
        ## with instance_name
        graphite += 'CPU in %% - %s=%.2f;90;95;0;100 ' % (instance['name'], instance['cpu_stats'])
        graphite += 'CPU_%%#%s#%s=%.2f;90;95;0;100 ' % (project_name, instance['name'], instance['cpu_stats'])
        ## with instance_ip
        graphite += 'CPU_IP%%#%s#%s=%.2f;90;95;0;100 ' % (project_name, instance['ip'], instance['cpu_stats'])

        # Format Memory stats
        output += '\tMemory: %.2f %% (%.2f GB of %.0f GB)\n' % (instance['memory_stats'][
            'percentage'], instance['memory_stats']['used'] / 1048576.0, instance[
                'memory_stats']['total'] / 1048576.0)
        ## with instance_name
        graphite += 'Memory in %% - %s=%.2f;90;95;0;100 ' % (instance['name'], instance['memory_stats']['percentage'])
        graphite += 'Memory_%%#%s#%s=%.2f;90;95;0;100 ' % (project_name, instance['name'], instance['memory_stats']['percentage'])
        ## with instance_ip
        graphite += 'Memory_IP%%#%s#%s=%.2f;90;95;0;100 ' % (project_name, instance['ip'], instance['memory_stats']['percentage'])

        # Format Disk stats
        output += '\tDISK:\n'
        iops_cons = 0
        tput_cons = 0
        for disk_name, disk in instance['disk_stats'].items():
            iops = (disk['read_ops'] + disk['write_ops']) / (disk['time'])
            iops_cons += iops
            tput = (disk['read_bytes'] + disk['write_bytes']) / (disk['time'])
            tput_cons += tput
            ## with instance_name
            # IOPS
            graphite += 'Disk_IOPS-%s-%s=%.2f;;;; ' % (instance['name'], disk_name, iops)
            graphite += 'Disk_IOPS#%s#%s-%s=%.2f;;;; ' % (project_name, instance['name'], disk_name, iops)
            graphite += 'Disk_IOPS#%s#%s-%s#%s=%.2f;;;; ' % (project_name, instance['name'], disk_name, disk['vol_type'], iops)

            # THROUGHPUT in bytes/sec
            graphite += 'Disk_TPUT-%s-%s=%.2f;;;; ' % (instance['name'], disk_name, tput)
            graphite += 'Disk_TPUT#%s#%s-%s=%.2f;;;; ' % (project_name, instance['name'], disk_name, tput)
            graphite += 'Disk_TPUT#%s#%s-%s#%s=%.2f;;;; ' % (project_name, instance['name'], disk_name, disk['vol_type'], tput)

            # THROTTLE VALUES
            graphite += 'Disk_IOPS#%s#%s-%s#thrott_bytes=%s;;;; ' % (project_name, instance['name'], disk_name, disk['total_bytes_sec'])
            graphite += 'Disk_IOPS#%s#%s-%s#thrott_iops=%s;;;; ' % (project_name, instance['name'], disk_name, disk['total_iops_sec'])

            ## with instance_ip
            # IOPS
            graphite += 'Disk_IOPS_IP#%s#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], disk_name, iops)
            graphite += 'Disk_IOPS_IP#%s#%s#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], disk_name, disk['vol_type'], iops)
            
            # THROUGHPUT in bytes/sec
            graphite += 'Disk_TPUT_IP#%s#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], disk_name, tput)
            graphite += 'Disk_TPUT_IP#%s#%s#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], disk_name, disk['vol_type'], tput)

            # THROTTLE VALUES
            graphite += 'Disk_IOPS_IP#%s#%s#%s#thrott_bytes=%s;;;; ' % (project_name, instance['ip'], disk_name, disk['total_bytes_sec'])
            graphite += 'Disk_IOPS_IP#%s#%s#%s#thrott_iops=%s;;;; ' % (project_name, instance['ip'], disk_name, disk['total_iops_sec'])

        ## with instance_name
        # IOPS
        graphite += 'Disk in IOPS - %s=%.2f;;;; ' % (instance['name'], iops_cons)
        graphite += 'Disk_IOPS#%s#%s=%.2f;;;; ' % (project_name, instance['name'], iops_cons)
         
        # THROUGHPUT in bytes/sec
        graphite += 'Disk in TPUT - %s=%.2f;;;; ' % (instance['name'], tput_cons)
        graphite += 'Disk_TPUT#%s#%s=%.2f;;;; ' % (project_name, instance['name'], tput_cons)

        ## with instance_ip
        # IOPS
        graphite += 'Disk_IOPS#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], iops_cons)
        # THROUGHPUT
        graphite += 'Disk_TPUT#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], tput_cons)

        for disk_name, disk in instance['disk_stats'].items():
            output += '\t  %s [%s]: %.2f IOPS, %.2f kB/s (read), %.2f kB/s (write), total_iops_sec: %s, total_bytes_sec: %s\n' % (
                disk_name, disk['vol_type'], (disk['read_ops'] + disk['write_ops']) / (disk['time']),
                disk['read_bytes'] / (1024.0 * disk['time']), disk['write_bytes'] / (
                    1024.0 * disk['time']), disk['total_iops_sec'], disk['total_bytes_sec'])

        # Format Network stats
        output += '\tINTERFACE:\n'
        bps_cons = 0
        for interface_name, interface in instance['interface_stats'].items():
            incoming = (interface['rx_bytes'] * 8) / interface['time']
            outgoing = (interface['tx_bytes'] * 8) / interface['time']
            bps = (incoming + outgoing)
            bps_cons += bps
            output += '\t  %s: %s, %s (in), %s (out), %.2f pkts/s (read), %.2f pkts/s (write)\n' % (
                interface_name, get_highest_unit(bps_cons), get_highest_unit(incoming), get_highest_unit(outgoing), interface['rx_packets'] / interface['time'],
                interface['tx_packets'] / interface['time'])
            output += '\t  Throttling: %s Gbps(out)\n' % interface['ob_throttle']
            ## with instance_name
            graphite += 'Interface#%s#%s#%s#in=%.2f;;;; ' % (project_name, instance['name'], interface_name, incoming)
            graphite += 'Interface#%s#%s#%s#out=%.2f;;;; ' % (project_name, instance['name'], interface_name, outgoing)
            graphite += 'Interface#%s#%s#%s#thrott_out=%.2f;;;; ' % (project_name, instance['name'], interface_name, interface['ob_throttle'])
            ## with instance_ip
            graphite += 'Interface_IP#%s#%s#%s#in=%.2f;;;; ' % (project_name, instance['ip'], interface_name, incoming)
            graphite += 'Interface_IP#%s#%s#%s#out=%.2f;;;; ' % (project_name, instance['ip'], interface_name, outgoing)
            graphite += 'Interface_IP#%s#%s#%s#thrott_out=%.2f;;;; ' % (project_name, instance['ip'], interface_name, interface['ob_throttle'])
        ## with instance_name
        graphite += 'Interface in kBps - %s=%.2f;;;; ' % (instance['name'], bps_cons)
        graphite += 'Interface_kBps#%s#%s=%.2f;;;; ' % (project_name, instance['name'], bps_cons)
        graphite += 'Interface#%s#%s=%.2f;;;; ' % (project_name, instance['name'], bps_cons)
        ## with instance_ip
        graphite += 'Interface_IP#%s#%s=%.2f;;;; ' % (project_name, instance['ip'], bps_cons)

    print firstLine + ' | ' + graphite + output

    if instance_count > 1 and instance_running_count == 0:
        print "Error Reason : No instance in running state."
        return STATUS_ERROR
    else:
        return STATUS_OK


if __name__ == '__main__':
    sys.exit(main())

